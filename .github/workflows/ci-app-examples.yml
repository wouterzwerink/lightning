name: Test App - examples

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize]  # add `ready_for_review` since draft is skipped
    paths:
      - ".github/workflows/ci-app-examples.yml"
      - "src/lightning_app/**"
      - "tests/tests_app_examples/**"
      - "examples/app_*"
      - "requirements/app/**"
      - "setup.py"
      - ".actions/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

defaults:
  run:
    shell: bash

jobs:
  app-examples:
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-2022]
        pkg-name: ["app"]
        python-version: ["3.9"]
        requires: ["oldest", "latest"]
        include:
          # "lightning" installs the monolithic package
          - {os: "macOS-11", pkg-name: "lightning", python-version: "3.9", requires: "latest"}
          - {os: "ubuntu-20.04", pkg-name: "lightning", python-version: "3.9", requires: "latest"}
          - {os: "windows-2022", pkg-name: "lightning", python-version: "3.9", requires: "latest"}

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: basic setup
        run: pip install -q -r .actions/requirements.txt

      - name: Set min. dependencies
        if: ${{ matrix.requires == 'oldest' }}
        run: python .actions/assistant.py replace_oldest_ver

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Get pip cache
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.pkg-name }}-${{ matrix.requires }}-${{ hashFiles('requirements/app/base.txt') }}
          restore-keys: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.pkg-name }}-${{ matrix.requires }}-

      - name: Install dependencies
        env:  # TODO: drop this when we will be using regular releases for testing
          PACKAGE_NAME: pytorch
        run: |
          pip --version
          pip install -r requirements/app/devel.txt --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
          pip list

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install Lightning as top-level
        env:
          PACKAGE_NAME: ${{ matrix.pkg-name }}
        run: pip install -e .

      - name: Adjust tests
        if: ${{ matrix.pkg-name == 'lightning' }}
        run: python .actions/assistant.py copy_replace_imports --source_dir="./tests" --source_import="lightning_app" --target_import="lightning.app"

      - name: Adjust examples
        if: ${{ matrix.pkg-name != 'lightning' }}
        run: |
          python .actions/assistant.py copy_replace_imports --source_dir="./examples" --source_import="lightning.app" --target_import="lightning_app"
          python .actions/assistant.py copy_replace_imports --source_dir="./examples" --source_import="lightning" --target_import="lightning_app"

      - name: Switch coverage scope
        run: python -c "print('COVERAGE_SCOPE=' + str('lightning' if '${{matrix.pkg-name}}' == 'lightning' else 'lightning_app'))" >> $GITHUB_ENV

      - name: Tests
        working-directory: ./tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          PYTEST_ARTIFACT: results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
        run: |
          coverage run --source ${COVERAGE_SCOPE} -m pytest -m "not cloud" tests_app_examples --timeout=300 -vvvv --junitxml=$PYTEST_ARTIFACT --durations=0

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
          path: tests/results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
        if: failure()

      - name: Statistics
        if: success()
        working-directory: ./tests
        run: |
          coverage xml -i
          coverage report -i

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: tests/coverage.xml
          flags: cpu,pytest,app,examples
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
